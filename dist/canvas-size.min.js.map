{"version":3,"file":"canvas-size.min.js","sources":["../src/canvas-test.js","../src/test-sizes.js","../src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: DO NOT USE ES6 CODE THAT REQUIRES BABEL HELPERS IN THIS FILE.\n *            This function will be used on the main thread and as part of an\n *            inline web worker, but access to Babel helpers will be available\n *            only on the main thread.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = Math.max(Math.ceil(size[0]), 1);\n    const height   = Math.max(Math.ceil(size[1]), 1);\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    if (testCtx) {\n        testCtx.fillRect.apply(testCtx, fill);\n\n        // Render the test pixel in the bottom-right corner of the\n        // test canvas in the top-left of the 1x1 crop canvas. This\n        // dramatically reducing the time for getImageData to complete.\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n    }\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Release canvas elements (Safari memory usage fix)\n    // See: https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n    [cropCvs, testCvs].forEach(cvs => {\n        cvs.height = 0;\n        cvs.width = 0;\n    });\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","const testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5)\n        11402,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // Chrome 68 (Android 6)\n        10836,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        1\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ]\n};\n\nexport default testSizes;","import canvasTest from './canvas-test';\nimport testSizes from './test-sizes';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport          = window && 'HTMLCanvasElement' in window;\n    const hasOffscreenCanvasSupport = window && 'OffscreenCanvas' in window;\n    const jobID                     = Date.now();\n    const { onError, onSuccess, ...settingsWithoutCallbacks } = settings;\n\n    let worker  = null;\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Create web worker\n    if (settings.useWorker && hasOffscreenCanvasSupport) {\n        const js = `\n            var canvasTest = ${canvasTest.toString()};\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n\n        worker = new Worker(blobURL);\n        URL.revokeObjectURL(blobURL);\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n    }\n\n    // Promise\n    if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            const promiseSettings = {\n                ...settings,\n                onError(width, height, benchmark) {\n                    let isLastTest;\n\n                    // If running on the main thread, an empty settings.sizes\n                    // array indicates the last test.\n                    if (settings.sizes.length === 0) {\n                        isLastTest = true;\n                    }\n                    // If running in a web worker, the settings.sizes array\n                    // accessible to this callback wil not be modified because a\n                    // copy of the settings object is sent to the worker.\n                    // Therefore, a comparison of the width and height returned\n                    // to this callback and the last [width, height] item in the\n                    // settings.sizes array is used to determine the last test.\n                    else {\n                        const [[lastWidth, lastHeight]] = settings.sizes.slice(-1);\n                        isLastTest = width === lastWidth && height === lastHeight;\n                    }\n\n                    onError(width, height, benchmark);\n\n                    if (isLastTest) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    onSuccess(width, height, benchmark);\n                    resolve({ width, height, benchmark });\n                }\n            };\n\n            if (worker) {\n                const { onError, onSuccess } = promiseSettings;\n\n                // Store callbacks in workerJobs object\n                workerJobs[jobID] = { onError, onSuccess };\n\n                // Send message to work\n                worker.postMessage(settingsWithoutCallbacks);\n            }\n            else {\n                canvasTest(promiseSettings);\n            }\n        });\n    }\n    // Standard Callbacks\n    else {\n        if (worker) {\n            // Store callbacks in workerJobs object\n            workerJobs[jobID] = { onError, onSuccess };\n\n            // Send message to worker\n            worker.postMessage(settingsWithoutCallbacks);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = { ...defaults, ...options };\n\n        // Prevent mutation of sizes array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasTest","settings","cropCvs","testCvs","size","sizes","shift","width","Math","max","ceil","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","forEach","cvs","postMessage","length","onSuccess","onError","testSizes","area","defaults","min","step","usePromise","useWorker","Function","prototype","workerJobs","createSizesArray","isArea","isWidth","isHeight","testMin","testStep","testSize","push","handleMethod","hasCanvasSupport","window","hasOffscreenCanvasSupport","jobID","settingsWithoutCallbacks","_objectWithoutProperties","_excluded","worker","js","concat","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","onmessage","e","_e$data","Promise","resolve","reject","promiseSettings","_objectSpread","isLastTest","_settings$sizes$slice2","_slicedToArray","slice","_settings$sizes$slice3","lastWidth","lastHeight","canvasSize","maxArea","options","arguments","undefined","_toConsumableArray","maxHeight","maxWidth","test"],"mappings":"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"}