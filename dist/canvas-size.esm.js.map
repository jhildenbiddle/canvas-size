{"version":3,"file":"canvas-size.esm.js","sources":["../src/canvas-test.js","../src/test-sizes.js","../src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: ONLY USE ES5 CODE IN THIS FUNCTION (I.E. NO BABEL TRANSPILATION)\n *            This function will be used both on the main thread and as part of\n *            an inline web worker. If this code is transpiled from ES6+ to ES5,\n *            the main thread will have access to Babel's helper functions but\n *            the web worker scope will.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = Math.max(Math.ceil(size[0]), 1);\n    const height   = Math.max(Math.ceil(size[1]), 1);\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    if (testCtx) {\n        testCtx.fillRect.apply(testCtx, fill);\n\n        // Render the test pixel in the bottom-right corner of the\n        // test canvas in the top-left of the 1x1 crop canvas. This\n        // dramatically reducing the time for getImageData to complete.\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n    }\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","const testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5)\n        11402,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // Chrome 68 (Android 6)\n        10836,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        1\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ]\n};\n\nexport default testSizes;","import canvasTest from './canvas-test';\nimport testSizes from './test-sizes';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport          = window && 'HTMLCanvasElement' in window;\n    const hasOffscreenCanvasSupport = window && 'OffscreenCanvas' in window;\n    const jobID                     = Date.now();\n    const { onError, onSuccess, ...settingsWithoutCallbacks } = settings;\n\n    let worker  = null;\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Create web worker\n    if (settings.useWorker && hasOffscreenCanvasSupport) {\n        const js = `\n            var canvasTest = ${canvasTest.toString()};\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n\n        worker = new Worker(blobURL);\n        URL.revokeObjectURL(blobURL);\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n    }\n\n    // Promise\n    if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            const promiseSettings = {\n                ...settings,\n                onError(width, height, benchmark) {\n                    let isLastTest;\n\n                    // If running on the main thread, an empty settings.sizes\n                    // array indicates the last test.\n                    if (settings.sizes.length === 0) {\n                        isLastTest = true;\n                    }\n                    // If running in a web worker, the settings.sizes array\n                    // accessible to this callback wil not be modified because a\n                    // copy of the settings object is sent to the worker.\n                    // Therefore, a comparison of the width and height returned\n                    // to this callback and the last [width, height] item in the\n                    // settings.sizes array is used to determine the last test.\n                    else {\n                        const [[lastWidth, lastHeight]] = settings.sizes.slice(-1);\n                        isLastTest = width === lastWidth && height === lastHeight;\n                    }\n\n                    onError(width, height, benchmark);\n\n                    if (isLastTest) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    onSuccess(width, height, benchmark);\n                    resolve({ width, height, benchmark });\n                }\n            };\n\n            if (worker) {\n                const { onError, onSuccess } = promiseSettings;\n\n                // Store callbacks in workerJobs object\n                workerJobs[jobID] = { onError, onSuccess };\n\n                // Send message to work\n                worker.postMessage(settingsWithoutCallbacks);\n            }\n            else {\n                canvasTest(promiseSettings);\n            }\n        });\n    }\n    // Standard Callbacks\n    else {\n        if (worker) {\n            // Store callbacks in workerJobs object\n            workerJobs[jobID] = { onError, onSuccess };\n\n            // Send message to worker\n            worker.postMessage(settingsWithoutCallbacks);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = { ...defaults, ...options };\n\n        // Prevent mutation of sizes array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasTest","settings","size","sizes","shift","width","Math","max","ceil","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","cropCvs","testCvs","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","postMessage","length","onSuccess","onError","testSizes","area","defaults","min","step","usePromise","useWorker","Function","prototype","workerJobs","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","handleMethod","hasCanvasSupport","window","hasOffscreenCanvasSupport","jobID","settingsWithoutCallbacks","_excluded","worker","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","onmessage","e","Promise","resolve","reject","promiseSettings","isLastTest","slice","_settings$sizes$slice2","_slicedToArray","_settings$sizes$slice","_settings$sizes$slice3","lastWidth","lastHeight","canvasSize","maxArea","options","arguments","undefined","_toConsumableArray","_objectSpread","maxHeight","maxWidth","test"],"mappings":"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"}