{"version":3,"file":"canvas-size.esm.js","sources":["../src/canvas-test.js","../src/test-sizes.js","../src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: ONLY USE ES5 CODE IN THIS FUNCTION (I.E. NO BABEL TRANSPILATION)\n *            This function will be used both on the main thread and as part of\n *            an inline web worker. If this code is transpiled from ES6+ to ES5,\n *            the main thread will have access to Babel's helper functions but\n *            the web worker scope will.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = size[0];\n    const height   = size[1];\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    if (testCtx) {\n        testCtx.fillRect.apply(testCtx, fill);\n\n        // Render the test pixel in the bottom-right corner of the\n        // test canvas in the top-left of the 1x1 crop canvas. This\n        // dramatically reducing the time for getImageData to complete.\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n    }\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","const testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5)\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        1\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ]\n};\n\nexport default testSizes;","import canvasTest from './canvas-test';\nimport testSizes from './test-sizes';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport          = window && 'HTMLCanvasElement' in window;\n    const hasOffscreenCanvasSupport = window && 'OffscreenCanvas' in window;\n    const jobID                     = Date.now();\n    const { onError, onSuccess, ...settingsWithoutCallbacks } = settings;\n\n    let worker  = null;\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Create web worker\n    if (settings.useWorker && hasOffscreenCanvasSupport) {\n        const js = `\n            var canvasTest = ${canvasTest.toString()};\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n\n        worker = new Worker(blobURL);\n        URL.revokeObjectURL(blobURL);\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n    }\n\n    // Promise\n    if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            const promiseSettings = {\n                ...settings,\n                onError(width, height, benchmark) {\n                    let isLastTest;\n\n                    // If running on the main thread, an empty settings.sizes\n                    // array indicates the last test.\n                    if (settings.sizes.length === 0) {\n                        isLastTest = true;\n                    }\n                    // If running in a web worker, the settings.sizes array\n                    // accessible to this callback wil not be modified because a\n                    // copy of the settings object is sent to the worker.\n                    // Therefore, a comparison of the width and height returned\n                    // to this callback and the last [width, height] item in the\n                    // settings.sizes array is used to determine the last test.\n                    else {\n                        const [[lastWidth, lastHeight]] = settings.sizes.slice(-1);\n                        isLastTest = width === lastWidth && height === lastHeight;\n                    }\n\n                    onError(width, height, benchmark);\n\n                    if (isLastTest) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    onSuccess(width, height, benchmark);\n                    resolve({ width, height, benchmark });\n                }\n            };\n\n            if (worker) {\n                const { onError, onSuccess } = promiseSettings;\n\n                // Store callbacks in workerJobs object\n                workerJobs[jobID] = { onError, onSuccess };\n\n                // Send message to work\n                worker.postMessage(settingsWithoutCallbacks);\n            }\n            else {\n                canvasTest(promiseSettings);\n            }\n        });\n    }\n    // Standard Callbacks\n    else {\n        if (worker) {\n            // Store callbacks in workerJobs object\n            workerJobs[jobID] = { onError, onSuccess };\n\n            // Send message to worker\n            worker.postMessage(settingsWithoutCallbacks);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = { ...defaults, ...options };\n\n        // Prevent mutation of sizes array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasTest","settings","size","sizes","shift","width","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","cropCvs","testCvs","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","postMessage","length","onSuccess","onError","testSizes","area","defaults","max","min","step","usePromise","useWorker","Function","prototype","workerJobs","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","handleMethod","hasCanvasSupport","window","hasOffscreenCanvasSupport","jobID","settingsWithoutCallbacks","worker","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","onmessage","e","Promise","resolve","reject","promiseSettings","isLastTest","slice","lastWidth","lastHeight","canvasSize","maxArea","options","maxHeight","maxWidth","test"],"mappings":"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"}