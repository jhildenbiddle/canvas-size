{"version":3,"file":"canvas-size.js","sources":["../src/canvas-test.js","../src/test-sizes.js","../src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: ONLY USE ES5 CODE IN THIS FUNCTION (I.E. NO BABEL TRANSPILATION)\n *            This function will be used both on the main thread and as part of\n *            an inline web worker. If this code is transpiled from ES6+ to ES5,\n *            the main thread will have access to Babel's helper functions but\n *            the web worker scope will.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = Math.max(Math.ceil(size[0]), 1);\n    const height   = Math.max(Math.ceil(size[1]), 1);\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    if (testCtx) {\n        testCtx.fillRect.apply(testCtx, fill);\n\n        // Render the test pixel in the bottom-right corner of the\n        // test canvas in the top-left of the 1x1 crop canvas. This\n        // dramatically reducing the time for getImageData to complete.\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n    }\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","const testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5)\n        11402,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // Chrome 68 (Android 6)\n        10836,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        1\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // Edge 17 (Win)\n        // IE11 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        1\n    ]\n};\n\nexport default testSizes;","import canvasTest from './canvas-test';\nimport testSizes from './test-sizes';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport          = window && 'HTMLCanvasElement' in window;\n    const hasOffscreenCanvasSupport = window && 'OffscreenCanvas' in window;\n    const jobID                     = Date.now();\n    const { onError, onSuccess, ...settingsWithoutCallbacks } = settings;\n\n    let worker  = null;\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Create web worker\n    if (settings.useWorker && hasOffscreenCanvasSupport) {\n        const js = `\n            var canvasTest = ${canvasTest.toString()};\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n\n        worker = new Worker(blobURL);\n        URL.revokeObjectURL(blobURL);\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n    }\n\n    // Promise\n    if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            const promiseSettings = {\n                ...settings,\n                onError(width, height, benchmark) {\n                    let isLastTest;\n\n                    // If running on the main thread, an empty settings.sizes\n                    // array indicates the last test.\n                    if (settings.sizes.length === 0) {\n                        isLastTest = true;\n                    }\n                    // If running in a web worker, the settings.sizes array\n                    // accessible to this callback wil not be modified because a\n                    // copy of the settings object is sent to the worker.\n                    // Therefore, a comparison of the width and height returned\n                    // to this callback and the last [width, height] item in the\n                    // settings.sizes array is used to determine the last test.\n                    else {\n                        const [[lastWidth, lastHeight]] = settings.sizes.slice(-1);\n                        isLastTest = width === lastWidth && height === lastHeight;\n                    }\n\n                    onError(width, height, benchmark);\n\n                    if (isLastTest) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    onSuccess(width, height, benchmark);\n                    resolve({ width, height, benchmark });\n                }\n            };\n\n            if (worker) {\n                const { onError, onSuccess } = promiseSettings;\n\n                // Store callbacks in workerJobs object\n                workerJobs[jobID] = { onError, onSuccess };\n\n                // Send message to work\n                worker.postMessage(settingsWithoutCallbacks);\n            }\n            else {\n                canvasTest(promiseSettings);\n            }\n        });\n    }\n    // Standard Callbacks\n    else {\n        if (worker) {\n            // Store callbacks in workerJobs object\n            workerJobs[jobID] = { onError, onSuccess };\n\n            // Send message to worker\n            worker.postMessage(settingsWithoutCallbacks);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = { ...defaults, ...options, sizes };\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {boolean} [options.useWorker=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = { ...defaults, ...options };\n\n        // Prevent mutation of sizes array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasTest","settings","size","sizes","shift","width","Math","max","ceil","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","cropCvs","testCvs","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","postMessage","length","onSuccess","onError","testSizes","area","defaults","min","step","usePromise","useWorker","Function","prototype","workerJobs","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","handleMethod","hasCanvasSupport","window","hasOffscreenCanvasSupport","jobID","settingsWithoutCallbacks","worker","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","onmessage","e","Promise","resolve","reject","promiseSettings","isLastTest","slice","lastWidth","lastHeight","canvasSize","maxArea","options","maxHeight","maxWidth","test"],"mappings":"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"}